#!/bin/bash
# Establecer variables de localizaci√≥n a valores predeterminados
export LC_ALL=C
export LANG=C

# Asegura que el script se detenga si alg√∫n comando falla
set -e

# Obtener la lista de archivos staged
STAGED_FILES=$(git diff --cached --name-only)

# Si no hay archivos staged, terminamos el script
if [ -z "$STAGED_FILES" ]; then
    echo "üö´ No files staged for commit. Aborting pre-commit hook."
    exit 0
fi

# Funci√≥n para verificar si hubo cambios en archivos staged
check_staged_changes() {
    MODIFIED_FILES=$(git diff --cached --name-only)
    if [ "$MODIFIED_FILES" != "$STAGED_FILES" ]; then
        echo "‚ùå Changes were made to staged files by $1. Commit aborted."
        exit 1
    fi
}

# Ejecutar Prettier en archivos staged del frontend
echo "üöÄ Running Prettier for staged frontend files..."
for file in $STAGED_FILES; do
    if [[ $file == frontend/* && $file == *.{js,ts,css,html,json} ]]; then
        npx prettier --write "$file"
    fi
done
git add $STAGED_FILES
check_staged_changes "Prettier"

# Activar el entorno virtual
source ./backend/venv/bin/activate 

# Ejecutar Black en archivos staged del backend
echo "üöÄ Running Black for staged Python files..."
for file in $STAGED_FILES; do
    if [[ $file == backend/*.py ]]; then
        black "$file"
    fi
done
git add $STAGED_FILES
check_staged_changes "Black"

# Ejecutar isort en archivos staged del backend
echo "üöÄ Running isort for staged Python files..."
for file in $STAGED_FILES; do
    if [[ $file == backend/*.py ]]; then
        isort "$file"
    fi
done
git add $STAGED_FILES
check_staged_changes "isort"

# Ejecutar Ruff en archivos staged del backend
echo "üöÄ Running Ruff for staged Python files..."
for file in $STAGED_FILES; do
    if [[ $file == backend/*.py ]]; then
        ruff check --fix "$file"
    fi
done
git add $STAGED_FILES
check_staged_changes "Ruff"

# Si llegamos hasta aqu√≠, el commit puede continuar
echo "‚úÖ All checks passed! Ready to commit."
exit 0
